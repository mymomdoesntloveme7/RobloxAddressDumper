using EyeStepPackage;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace RobloxExploitPRO
{
    class Program
    {
        public static float version = 1.5f;

        [STAThread]
        public static void List(string arg)
        {
            try
            {
                var argXref = util.getPrologue(scanner.scan_xrefs(arg).Last());
                var argResults = util.getCalls(util.nextCall(argXref));

                string find = $"Listing functions that match with: {arg}";
                SetColorText(ConsoleColor.Green, find);

                List<string> Addresses = new List<string>();

                for (int i = 0; i < argResults.Count; i++)
                {
                    string Addy = $"Addy: 0x{util.raslr(argResults[i])} Function:  {util.getAnalysis(argResults[i]).ToString()}";
                    SetColorText(ConsoleColor.DarkGreen, Addy);

                    Addresses.Add(Addy);
                }

                // Finishing up
                SetColorText(ConsoleColor.DarkBlue, "[Message]: Saving to file...");
                string Desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                Random rand = new Random();

                string Name = $"Rad_{rand.Next(500, 2000)}_{arg}.txt";

                string path = Path.Combine(Desktop, Name);

                StreamWriter streamWriter = File.CreateText(path);
                streamWriter.WriteLine($"Generated by RAD V{version}");
                streamWriter.WriteLine($"Addresses for: {arg}");
                streamWriter.WriteLine(" ");

                foreach (string Addy in Addresses)
                {
                    streamWriter.WriteLine(Addy);
                }

                streamWriter.WriteLine(" ");
                streamWriter.WriteLine("Done");
                streamWriter.Close();
            }
            catch(Exception ex)
            {
                string Exception = $"[Exception]: {ex.Message.ToString()}";
                SetColorText(ConsoleColor.DarkRed, Exception);
            }
        }

        public static void FindXRef(string arg)
        {
            try
            {
                string find = $"Finding {arg}...";
                SetColorText(ConsoleColor.Green, find);

                var argXref = util.getPrologue(scanner.scan_xrefs(arg).Last());
                string Addy = $"[Found XRef]: {arg} with address: 0x{util.raslr(argXref)} (might be invalid)";

                SetColorText(ConsoleColor.DarkGreen, Addy);
                SetColorText(ConsoleColor.DarkBlue, "[Message]: Done!");
            }
            catch(Exception ex)
            {
                string Exception = $"[Exception]: {ex.Message.ToString()}";
                SetColorText(ConsoleColor.DarkRed, Exception);
            }
        }

        public static void SetColorText(ConsoleColor Color, string Text)
        {
            Console.ForegroundColor = Color;
            Console.WriteLine(Text);
            Console.ResetColor();
        }
        
        static void Main(string[] args)
        {
            string Welcome = @"d8888b.  .d8b.  d8888b.      db    db  db      ooooo 
88  `8D d8' `8b 88  `8D      88    88 o88     8P~~~~ 
88oobY' 88ooo88 88   88      Y8    8P  88    dP      
88`8b   88~~~88 88   88      `8b  d8'  88    V8888b. 
88 `88. 88   88 88  .8D       `8bd8'   88 db     `8D 
88   YD YP   YP Y8888D'         YP     VP VP 88oobY' 
                                                     
                                                     ";

            Console.Title = $"RAD V{version}";

            SetColorText(ConsoleColor.Green, Welcome);
            SetColorText(ConsoleColor.DarkMagenta, "Welcome to RAD v1.5 type(list 'substring') to find a list of substrings");
            try
            {
                EyeStep.open("RobloxPlayerBeta");
                while (true)
                {
                    string Text = Console.ReadLine();
                    string[] Args = Text.Split(' ');

                    if (Args[0] == "list")
                    {
                        string Args_T = "";
                        for (int i = 0; i < Args.Length; i++)
                        {
                            if (Args[i] != "" && Args[i] != "list" && Args[i] != Args.Last())
                            {
                                Args_T += $"{Args[i]} ";
                            }
                            if (Args[i] == Args.Last())
                            {
                                Args_T += Args[i];
                            }
                        }
                        List(Args_T);
                        Args_T = "";
                    }
                    else if (Args[0] == "find")
                    {
                        string Args_T = "";
                        for (int i = 0; i < Args.Length; i++)
                        {
                            if (Args[i] != "" && Args[i] != "find" && Args[i] != Args.Last())
                            {
                                Args_T += $"{Args[i]} ";
                            }
                            if (Args[i] == Args.Last())
                            {
                                Args_T += Args[i];
                            }
                        }
                        FindXRef(Args_T);
                        Args_T = "";
                    }
                }
            }
            catch(Exception ex)
            {
                string Exception = $"[Exception]: {ex.Message.ToString()}";
                SetColorText(ConsoleColor.DarkRed, Exception);
            }
        }
    }
}
